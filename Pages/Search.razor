@page "/search"
@inject HttpClient Http

@code{

            private Root main;

            private string ErrorMessage;
            private string Arrtist = "snoopdog";
            private string dateFormatString = "yyyy-MM-dd";
            [Parameter]
            public EventCallback<string>
            searchChanged
            { get; set; }
            private async Task GetDataAsync()
            {
                try
                {

                    string uri = "https://ws.audioscrobbler.com/2.0/?method=artist.gettoptracks&artist=" + Arrtist + "&api_key=6fb86347aefc0240d93a8d2a9e08f9d8&format=json";
                    main = await Http.GetJsonAsync<Root>(uri);
                    ErrorMessage = String.Empty;
                }
                catch (Exception e)
                {
                    ErrorMessage = e.Message;
                }
            }

            protected override async Task OnInitializedAsync()
            {
                await GetDataAsync();
            }

            public async Task OnSearchChanged(ChangeEventArgs e)
            {
                var search = (string)e.Value;
                var newSearch = search;
                search = newSearch;
                await searchChanged.InvokeAsync(search);
                await GetDataAsync();
            }


            public class Artist
            {
                public string name { get; set; }
                public string mbid { get; set; }
                public string url { get; set; }
            }

            public class Image
            {

                public string Text { get; set; }
                public string size { get; set; }
            }

            public class Attr
            {
                public string rank { get; set; }
            }

            public class Track
            {
                public string name { get; set; }
                public string playcount { get; set; }
                public string listeners { get; set; }
                public string mbid { get; set; }
                public string url { get; set; }
                public string streamable { get; set; }
                public Artist artist { get; set; }
                public List<Image> image { get; set; }

                public Attr Attr { get; set; }
            }

            public class Attr2
            {
                public string artist { get; set; }
                public string page { get; set; }
                public string perPage { get; set; }
                public string totalPages { get; set; }
                public string total { get; set; }
            }

            public class Toptracks
            {
                public List<Track> track { get; set; }

                public Attr2 Attr { get; set; }
            }

            public class Root
            {
                public Toptracks toptracks { get; set; }
            }
}
@if (main == null)
{
    <p>Calling the API has run into a problem.</p>
    <p>A reminder that the API can only make 10 requests per minute.</p>
}
else
{
 

    <div class="mb-2 p-3">
        Input the date for the Artist you want to see:
        <input type="text"   @bind="Arrtist"  />
        <input type="submit" value="Search" @onclick="@GetDataAsync"/>
    </div>



    if (main.toptracks.track.Count == 0)
    {
        <p> No Top Tracks found for this Artist. </p>
    }
    else
    {



        <table class="table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Playcount</th>
                   
                </tr>
            </thead>
            <tbody>

                @foreach (var track in main.toptracks.track)
                {
                    <tr>
                        <td>@track.name</td>
                        <td>@track.playcount</td>
                    </tr>
                }
            </tbody>
        </table>
    }
}















        }
